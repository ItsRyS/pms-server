const db = require('../config/db');
const supabase = require('../config/supabaseClient');
const path = require('path');

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const sanitizeFilename = (filename) => {
  let cleanName = filename
    .normalize('NFC') // ‡πÅ‡∏õ‡∏•‡∏á Unicode ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    .replace(/[\u0300-\u036f]/g, '') // ‡∏•‡∏ö Accents
    .replace(/[^a-zA-Z0-9‡∏Å-‡πô._-]/g, '_') // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    .replace(/_{2,}/g, '_') // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô `_` ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
    .replace(/^_+|_+$/g, ''); // ‡∏•‡∏ö `_` ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢

  return cleanName.length > 0 ? cleanName : 'file'; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢‡∏´‡∏°‡∏î
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase ‡πÅ‡∏•‡∏∞ MySQL
exports.uploadDocument = async (req, res) => {
  try {
    const { doc_title, doc_description, uploaded_by } = req.body;
    const file = req.file;

    if (!file) {
      return res.status(400).json({ message: 'No file uploaded. Please attach a file.' });
    }
    if (!doc_title || !doc_description || !uploaded_by) {
      return res.status(400).json({ message: 'All fields are required.' });
    }

    console.log('üìå Debug: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Client:', { doc_title, doc_description, uploaded_by });

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    const fileExtension = path.extname(file.originalname);
    console.log('üìå File Extension:', fileExtension);

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const baseFilename = path.basename(file.originalname, fileExtension);
    const sanitizedFilename = sanitizeFilename(baseFilename) + fileExtension;
    const filePath = `Document/${Date.now()}_${sanitizedFilename}`;

    console.log('üìå Original Filename:', file.originalname);
    console.log('üìå Sanitized Filename:', sanitizedFilename);

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
    const { error } = await supabase.storage
      .from('upload')
      .upload(filePath, file.buffer, { contentType: file.mimetype });

    if (error) {
      console.error('‚ùå Supabase Upload Error:', error.message);
      return res.status(500).json({ message: 'Upload to Supabase failed', error: error.message });
    }

    console.log('‚úÖ Supabase Upload ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', filePath);

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
    const [result] = await db.query(
      `INSERT INTO document_forms (doc_title, doc_description, doc_path, uploaded_by, upload_date)
       VALUES (?, ?, ?, ?, NOW())`,
      [doc_title, doc_description, filePath, uploaded_by]
    );

    console.log('‚úÖ MySQL Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result);

    res.status(200).json({
      message: 'File uploaded successfully',
      filePath,
      doc_id: result.insertId,
    });
  } catch (error) {
    console.error('‚ùå Error uploading document:', error.message);
    res.status(500).json({ message: 'Upload failed', error: error.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å MySQL
exports.getDocuments = async (req, res) => {
  try {
    const [results] = await db.query(`
      SELECT
        df.doc_id,
        df.doc_title,
        df.doc_description,
        df.doc_path,
        u.username AS uploaded_by,
        df.upload_date
      FROM document_forms df
      JOIN users u ON df.uploaded_by = u.user_id
      ORDER BY df.upload_date DESC
    `);
    res.status(200).json(results);
  } catch (error) {
    console.error('Error fetching documents:', error.message);
    res.status(500).json({ message: 'Failed to retrieve documents', error: error.message });
  }
};

// ‚úÖ ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Supabase ‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
exports.deleteDocument = async (req, res) => {
  const { id } = req.params;

  try {
    const [results] = await db.query(
      `SELECT doc_path FROM document_forms WHERE doc_id = ?`,
      [id]
    );
    if (results.length === 0) {
      return res.status(404).json({ message: 'Document not found' });
    }

    const fileUrl = results[0].doc_path;
    const filePath = fileUrl.replace('https://supabase-link/', ''); // ‡πÄ‡∏≠‡∏≤ path ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÉ‡∏ä‡πâ

    // üî• ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Supabase
    const { error: deleteError } = await supabase.storage
      .from('upload')
      .remove([filePath]);

    if (deleteError) {
      console.error('‚ùå Supabase Delete Error:', deleteError.message);
      return res.status(500).json({ message: 'Failed to delete from Supabase', error: deleteError.message });
    }

    // üî• ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await db.query(`DELETE FROM document_forms WHERE doc_id = ?`, [id]);

    res.status(200).json({ message: 'Document deleted successfully' });
  } catch (error) {
    console.error('Error deleting document:', error.message);
    res.status(500).json({ message: 'Failed to delete document', error: error.message });
  }
};
